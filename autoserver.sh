#!/bin/bash

# /*********************************************************************************
# * Projeto:   AutoServer
# * Autor:     Carlos Henrique Tourinho Santana
# * GitHub:    https://github.com/henriquetourinho/autoserver
# * Vers√£o:    1.0
# * Data:      12 de junho de 2025
# *
# * Descri√ß√£o:
# * Este script realiza a instala√ß√£o e configura√ß√£o completa de um servidor web
# * com a stack LEMP (Linux, Nginx, MariaDB, PHP) em sistemas operacionais
# * baseados em Debian/Ubuntu. Al√©m da stack principal, ele tamb√©m provisiona
# * o phpMyAdmin como interface de gerenciamento para o banco de dados.
# * O design do script foca em uma execu√ß√£o de "ponta a ponta" sem necessidade
# * de qualquer interven√ß√£o do usu√°rio, tornando-o ideal para deploys r√°pidos,
# * ambientes de teste ou para usu√°rios com menos experi√™ncia em administra√ß√£o
# * de sistemas.
# *
# * Funcionalidades Principais:
# * - Instala√ß√£o "One-Click": Executa todo o processo com um √∫nico comando.
# * - Seguran√ßa por Padr√£o: Gera uma senha forte e aleat√≥ria para o usu√°rio
# * root do MariaDB, evitando credenciais fixas e inseguras.
# * - Configura√ß√£o Inteligente: Instala o phpMyAdmin de forma limpa, evitando
# * o conflito comum da instala√ß√£o do servidor Apache2 como depend√™ncia.
# * - Integra√ß√£o Nginx + PHP: Configura automaticamente o Nginx para processar
# * scripts PHP atrav√©s do PHP-FPM, utilizando a vers√£o correta.
# * - Robusto e √† Prova de Falhas: O script para imediatamente se um erro ocorre,
# * verifica privil√©gios de root e testa as configura√ß√µes do Nginx antes de
# * aplic√°-las para evitar a quebra do servi√ßo web.
# * - Customiz√°vel: As configura√ß√µes chave, como a vers√£o do PHP, s√£o definidas
# * em vari√°veis no topo do arquivo para f√°cil altera√ß√£o.
# *********************************************************************************/


# --------------------------------------------------------------------------------------
# SE√á√ÉO 1: PREPARA√á√ÉO E VERIFICA√á√ïES DE SEGURAN√áA
# --------------------------------------------------------------------------------------

# Garante que o script pare imediatamente se qualquer comando retornar um erro.
# Isso previne instala√ß√µes parciais ou configura√ß√µes incorretas. 'e' √© para 'exit'.
set -e

# Garante que o script seja executado com privil√©gios de superusu√°rio (root).
# Comandos de instala√ß√£o e configura√ß√£o de sistema exigem permiss√£o de administrador.
if [ "$(id -u)" -ne 0 ]; then
  echo "‚ùå ERRO: Este script precisa ser executado com privil√©gios de root."
  echo "   Por favor, salve o arquivo como 'autoserver.sh' e tente novamente usando: sudo ./autoserver.sh"
  exit 1 # Encerra o script com um c√≥digo de erro.
fi


# --------------------------------------------------------------------------------------
# SE√á√ÉO 2: VARI√ÅVEIS DE CONFIGURA√á√ÉO
#
# Centralizar as vari√°veis aqui facilita a customiza√ß√£o do script no futuro
# sem precisar alterar a l√≥gica principal.
# --------------------------------------------------------------------------------------

# Gera uma senha forte e aleat√≥ria para o usu√°rio 'root' do banco de dados.
# Usar `openssl rand` √© um m√©todo criptograficamente seguro e robusto.
# `tr -d` remove caracteres que podem causar problemas em linhas de comando.
DB_ROOT_PASS=$(openssl rand -base64 16 | tr -d '/+=')

# Define a vers√£o espec√≠fica do PHP que ser√° instalada.
# Fixar a vers√£o (ex: 8.2) garante consist√™ncia e evita surpresas caso a
# distribui√ß√£o Linux mude a sua vers√£o padr√£o. PHP 8.2 √© uma escolha moderna
# com bom desempenho e suporte de longo prazo (LTS).
PHP_VERSION="8.2"

# Define o diret√≥rio raiz para os arquivos do site.
# /var/www/html √© o padr√£o na maioria dos sistemas.
WEB_ROOT="/var/www/html"


# --------------------------------------------------------------------------------------
# SE√á√ÉO 3: EXECU√á√ÉO DA INSTALA√á√ÉO
# --------------------------------------------------------------------------------------

# O script come√ßa a executar as tarefas. As mensagens `echo` informam o usu√°rio
# sobre o progresso de cada etapa.
echo "üöÄ INICIANDO A INSTALA√á√ÉO E CONFIGURA√á√ÉO DO SERVIDOR LEMP..."
sleep 2 # Uma pequena pausa para o usu√°rio poder ler a mensagem inicial.

# ETAPA 1: ATUALIZA√á√ÉO DO SISTEMA
echo "üîÑ [ETAPA 1/6] Atualizando a lista de pacotes e o sistema operacional..."
apt-get update      # Sincroniza a lista de pacotes dispon√≠veis com os reposit√≥rios.
apt-get upgrade -y  # Atualiza todos os pacotes instalados para suas vers√µes mais recentes.
                    # O '-y' responde 'sim' automaticamente a todas as perguntas.

# ETAPA 2: INSTALA√á√ÉO DOS PACOTES PRINCIPAIS
echo "üì¶ [ETAPA 2/6] Instalando Nginx, MariaDB e a vers√£o ${PHP_VERSION} do PHP..."
# Instala o servidor web, o servidor de banco de dados e o cliente de linha de comando.
apt-get install -y nginx mariadb-server mariadb-client

# Instala a vers√£o espec√≠fica do PHP-FPM (FastCGI Process Manager), que √© a forma
# como o Nginx se comunica com o PHP, e os m√≥dulos PHP mais comuns e necess√°rios
# para a maioria das aplica√ß√µes web (ex: conex√£o com banco de dados, manipula√ß√£o
# de XML, strings, etc.).
apt-get install -y \
  php${PHP_VERSION}-fpm \
  php${PHP_VERSION}-mysql \
  php${PHP_VERSION}-cli \
  php${PHP_VERSION}-curl \
  php${PHP_VERSION}-xml \
  php${PHP_VERSION}-mbstring \
  php${PHP_VERSION}-zip \
  php${PHP_VERSION}-bcmath \
  php-json \
  php-common

# ETAPA 3: CONFIGURA√á√ÉO SEGURA DO BANCO DE DADOS (MARIADB)
echo "üîí [ETAPA 3/6] Configurando e protegendo o servidor de banco de dados MariaDB..."

# Garante que o servi√ßo do MariaDB seja iniciado agora e tamb√©m automaticamente
# toda vez que o servidor for reiniciado.
systemctl enable mariadb
systemctl start mariadb

# Executa uma s√©rie de comandos SQL para realizar a "configura√ß√£o segura" de forma
# totalmente automatizada. Isso √© mais confi√°vel do que tentar automatizar o script
# interativo `mysql_secure_installation`.
mysql -u root <<EOF
-- 1. Define a senha para o usu√°rio 'root', usando a senha aleat√≥ria gerada.
ALTER USER 'root'@'localhost' IDENTIFIED BY '${DB_ROOT_PASS}';
-- 2. Remove os usu√°rios an√¥nimos, que s√£o um risco de seguran√ßa.
DELETE FROM mysql.user WHERE User='';
-- 3. Remove o banco de dados 'test', que √© criado por padr√£o e n√£o √© necess√°rio.
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
-- 4. Aplica todas as altera√ß√µes de privil√©gios imediatamente.
FLUSH PRIVILEGES;
EOF

echo "üîë Senha do usu√°rio 'root' do MariaDB foi definida com sucesso."

# ETAPA 4: CONFIGURA√á√ÉO DO NGINX PARA PROCESSAR PHP
echo "‚öôÔ∏è  [ETAPA 4/6] Configurando o Nginx para se comunicar com o PHP-FPM..."

# Este bloco cria o arquivo de configura√ß√£o do site padr√£o do Nginx.
# Ele substitui o arquivo original por um que sabe como lidar com PHP.
# A diretiva `location ~ \.php$` √© a mais importante, pois redireciona
# todas as requisi√ß√µes para arquivos terminados em .php para o PHP-FPM.
cat > /etc/nginx/sites-available/default <<EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root ${WEB_ROOT};
    index index.php index.html index.htm; # Prioriza 'index.php' como p√°gina inicial.

    server_name _; # Responde a qualquer nome de dom√≠nio.

    location / {
        try_files \$uri \$uri/ =404;
    }

    # Bloco de configura√ß√£o crucial para o PHP
    location ~ \.php$ {
        include snippets/fastcgi-php.conf; # Inclui configura√ß√µes padr√£o do FastCGI.
        # Passa a requisi√ß√£o para o socket do PHP-FPM da vers√£o que instalamos.
        # O caminho do socket √© din√¢mico, baseado na vari√°vel \$PHP_VERSION.
        fastcgi_pass unix:/run/php/php${PHP_VERSION}-fpm.sock;
    }

    # Pro√≠be o acesso a arquivos como .htaccess, comum em servidores Apache.
    location ~ /\.ht {
        deny all;
    }
}
EOF

# Verifica se a sintaxe do arquivo de configura√ß√£o do Nginx est√° correta
# antes de tentar reiniciar o servi√ßo. Isso evita que o servidor web falhe.
nginx -t

echo "‚úÖ Configura√ß√£o do Nginx para PHP finalizada com sucesso."

# ETAPA 5: INSTALA√á√ÉO DO PHPMYADMIN (SEM CONFLITOS)
echo "üóÉÔ∏è [ETAPA 5/6] Instalando o painel de gerenciamento phpMyAdmin..."

# Este comando √© um truque essencial para automa√ß√£o. Ele pr√©-configura a resposta
# para a pergunta que o instalador do phpMyAdmin faria sobre qual servidor web
# reconfigurar. Ao escolher 'none', evitamos que ele tente instalar o 'apache2'
# como depend√™ncia, o que causaria conflito com nosso Nginx.
echo "phpmyadmin phpmyadmin/reconfigure-webserver multiselect none" | debconf-set-selections

# Instala o phpMyAdmin, mas sem pacotes "recomendados" para evitar lixo.
apt-get install -y phpmyadmin --no-install-recommends

# O phpMyAdmin √© instalado em /usr/share/phpmyadmin. Precisamos criar um atalho
# (link simb√≥lico) para dentro do nosso diret√≥rio web para que ele fique acess√≠vel
# pelo navegador.
ln -s /usr/share/phpmyadmin ${WEB_ROOT}/phpmyadmin

# ETAPA 6: FINALIZA√á√ÉO E REINICIALIZA√á√ÉO DOS SERVI√áOS
echo "üîÑ [ETAPA 6/6] Reiniciando e habilitando os servi√ßos para aplicar as mudan√ßas..."

# Reinicia os servi√ßos para que todas as novas configura√ß√µes entrem em vigor.
systemctl restart mariadb
systemctl restart "php${PHP_VERSION}-fpm"
systemctl restart nginx

# Habilita os servi√ßos para que eles iniciem automaticamente com o sistema.
systemctl enable "php${PHP_VERSION}-fpm"
systemctl enable nginx


# --------------------------------------------------------------------------------------
# SE√á√ÉO 4: MENSAGEM DE SUCESSO E INFORMA√á√ïES FINAIS
# --------------------------------------------------------------------------------------
echo ""
echo "==================================================================="
echo "‚úÖ  S U C E S S O !  O seu servidor foi provisionado pelo AutoServer."
echo "==================================================================="
echo ""
echo "O ambiente est√° pronto para uso. Aqui est√£o suas informa√ß√µes de acesso:"
echo ""
echo "üîó Para gerenciar seus bancos de dados, acesse o phpMyAdmin:"
echo "   URL: http://<IP_DO_SEU_SERVIDOR>/phpmyadmin"
echo ""
echo "üîê Credenciais de acesso ao Banco de Dados (MariaDB):"
echo "   Usu√°rio: root"
echo "   Senha:   ${DB_ROOT_PASS}"
echo ""
echo "==================================================================="
echo "‚ö†Ô∏è  IMPORTANTE: Anote esta senha e guarde-a em um local seguro! ‚ö†Ô∏è"
echo "==================================================================="
echo ""